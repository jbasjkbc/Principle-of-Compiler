// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 22 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | COLON
  | QM
  | NOT
  | SEQOR
  | SEQAND
  | SELFPLUS
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | PRINTCH
  | LIST
  | SWITCH
  | CASE
  | DO
  | FOR
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTCHAR of (char)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_COLON
    | TOKEN_QM
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_SELFPLUS
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_PRINTCH
    | TOKEN_LIST
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_DO
    | TOKEN_FOR
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTCHAR
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Stmts
    | NONTERM_Stmts1
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_LExprs
    | NONTERM_LExprs1
    | NONTERM_LExpr
    | NONTERM_Const
    | NONTERM_Const2
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | COLON  -> 11 
  | QM  -> 12 
  | NOT  -> 13 
  | SEQOR  -> 14 
  | SEQAND  -> 15 
  | SELFPLUS  -> 16 
  | EQ  -> 17 
  | NE  -> 18 
  | GT  -> 19 
  | LT  -> 20 
  | GE  -> 21 
  | LE  -> 22 
  | PLUS  -> 23 
  | MINUS  -> 24 
  | TIMES  -> 25 
  | DIV  -> 26 
  | MOD  -> 27 
  | CHAR  -> 28 
  | ELSE  -> 29 
  | IF  -> 30 
  | INT  -> 31 
  | NULL  -> 32 
  | PRINT  -> 33 
  | PRINTLN  -> 34 
  | RETURN  -> 35 
  | VOID  -> 36 
  | WHILE  -> 37 
  | PRINTCH  -> 38 
  | LIST  -> 39 
  | SWITCH  -> 40 
  | CASE  -> 41 
  | DO  -> 42 
  | FOR  -> 43 
  | CSTSTRING _ -> 44 
  | NAME _ -> 45 
  | CSTCHAR _ -> 46 
  | CSTINT _ -> 47 
  | CSTBOOL _ -> 48 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_COLON 
  | 12 -> TOKEN_QM 
  | 13 -> TOKEN_NOT 
  | 14 -> TOKEN_SEQOR 
  | 15 -> TOKEN_SEQAND 
  | 16 -> TOKEN_SELFPLUS 
  | 17 -> TOKEN_EQ 
  | 18 -> TOKEN_NE 
  | 19 -> TOKEN_GT 
  | 20 -> TOKEN_LT 
  | 21 -> TOKEN_GE 
  | 22 -> TOKEN_LE 
  | 23 -> TOKEN_PLUS 
  | 24 -> TOKEN_MINUS 
  | 25 -> TOKEN_TIMES 
  | 26 -> TOKEN_DIV 
  | 27 -> TOKEN_MOD 
  | 28 -> TOKEN_CHAR 
  | 29 -> TOKEN_ELSE 
  | 30 -> TOKEN_IF 
  | 31 -> TOKEN_INT 
  | 32 -> TOKEN_NULL 
  | 33 -> TOKEN_PRINT 
  | 34 -> TOKEN_PRINTLN 
  | 35 -> TOKEN_RETURN 
  | 36 -> TOKEN_VOID 
  | 37 -> TOKEN_WHILE 
  | 38 -> TOKEN_PRINTCH 
  | 39 -> TOKEN_LIST 
  | 40 -> TOKEN_SWITCH 
  | 41 -> TOKEN_CASE 
  | 42 -> TOKEN_DO 
  | 43 -> TOKEN_FOR 
  | 44 -> TOKEN_CSTSTRING 
  | 45 -> TOKEN_NAME 
  | 46 -> TOKEN_CSTCHAR 
  | 47 -> TOKEN_CSTINT 
  | 48 -> TOKEN_CSTBOOL 
  | 51 -> TOKEN_end_of_input
  | 49 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtM 
    | 33 -> NONTERM_StmtU 
    | 34 -> NONTERM_StmtU 
    | 35 -> NONTERM_StmtU 
    | 36 -> NONTERM_Stmts 
    | 37 -> NONTERM_Stmts 
    | 38 -> NONTERM_Stmts1 
    | 39 -> NONTERM_Stmts1 
    | 40 -> NONTERM_Expr 
    | 41 -> NONTERM_Expr 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_ExprNotAccess 
    | 63 -> NONTERM_ExprNotAccess 
    | 64 -> NONTERM_ExprNotAccess 
    | 65 -> NONTERM_AtExprNotAccess 
    | 66 -> NONTERM_AtExprNotAccess 
    | 67 -> NONTERM_AtExprNotAccess 
    | 68 -> NONTERM_AtExprNotAccess 
    | 69 -> NONTERM_Access 
    | 70 -> NONTERM_Access 
    | 71 -> NONTERM_Access 
    | 72 -> NONTERM_Access 
    | 73 -> NONTERM_Access 
    | 74 -> NONTERM_Access 
    | 75 -> NONTERM_Exprs 
    | 76 -> NONTERM_Exprs 
    | 77 -> NONTERM_Exprs1 
    | 78 -> NONTERM_Exprs1 
    | 79 -> NONTERM_LExprs 
    | 80 -> NONTERM_LExprs 
    | 81 -> NONTERM_LExprs1 
    | 82 -> NONTERM_LExprs1 
    | 83 -> NONTERM_LExpr 
    | 84 -> NONTERM_LExpr 
    | 85 -> NONTERM_Const 
    | 86 -> NONTERM_Const 
    | 87 -> NONTERM_Const 
    | 88 -> NONTERM_Const 
    | 89 -> NONTERM_Const2 
    | 90 -> NONTERM_Type 
    | 91 -> NONTERM_Type 
    | 92 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 51 
let _fsyacc_tagOfErrorTerminal = 49

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | COLON  -> "COLON" 
  | QM  -> "QM" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | SELFPLUS  -> "SELFPLUS" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | PRINTCH  -> "PRINTCH" 
  | LIST  -> "LIST" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | DO  -> "DO" 
  | FOR  -> "FOR" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTCHAR _ -> "CSTCHAR" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | QM  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | SELFPLUS  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | PRINTCH  -> (null : System.Object) 
  | LIST  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTCHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 11us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 58us; 54us; 59us; 54us; 64us; 54us; 71us; 54us; 84us; 54us; 92us; 54us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 7us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 58us; 87us; 71us; 72us; 84us; 85us; 92us; 93us; 9us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 58us; 46us; 59us; 60us; 64us; 65us; 71us; 45us; 84us; 45us; 92us; 45us; 9us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 58us; 47us; 59us; 86us; 64us; 88us; 71us; 47us; 84us; 47us; 92us; 47us; 2us; 65535us; 69us; 70us; 93us; 94us; 2us; 65535us; 69us; 89us; 93us; 89us; 42us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 56us; 57us; 58us; 48us; 59us; 48us; 62us; 63us; 64us; 48us; 67us; 68us; 71us; 48us; 74us; 75us; 78us; 79us; 80us; 81us; 82us; 83us; 84us; 48us; 90us; 91us; 92us; 48us; 101us; 103us; 105us; 134us; 108us; 109us; 112us; 113us; 114us; 115us; 135us; 117us; 136us; 118us; 137us; 119us; 138us; 120us; 139us; 121us; 140us; 122us; 141us; 123us; 142us; 124us; 143us; 125us; 144us; 126us; 145us; 127us; 146us; 128us; 147us; 129us; 148us; 130us; 149us; 132us; 152us; 131us; 153us; 131us; 164us; 133us; 172us; 134us; 42us; 65535us; 37us; 97us; 40us; 97us; 43us; 97us; 50us; 97us; 56us; 97us; 58us; 97us; 59us; 97us; 62us; 97us; 64us; 97us; 67us; 97us; 71us; 97us; 74us; 97us; 78us; 97us; 80us; 97us; 82us; 97us; 84us; 97us; 90us; 97us; 92us; 97us; 101us; 97us; 105us; 97us; 108us; 97us; 112us; 97us; 114us; 97us; 135us; 97us; 136us; 97us; 137us; 97us; 138us; 97us; 139us; 97us; 140us; 97us; 141us; 97us; 142us; 97us; 143us; 97us; 144us; 97us; 145us; 97us; 146us; 97us; 147us; 97us; 148us; 97us; 149us; 97us; 152us; 98us; 153us; 98us; 164us; 97us; 172us; 97us; 45us; 65535us; 37us; 99us; 40us; 99us; 43us; 99us; 50us; 99us; 56us; 99us; 58us; 99us; 59us; 99us; 62us; 99us; 64us; 99us; 67us; 99us; 71us; 99us; 74us; 99us; 78us; 99us; 80us; 99us; 82us; 99us; 84us; 99us; 90us; 99us; 92us; 99us; 101us; 100us; 105us; 99us; 108us; 99us; 112us; 99us; 114us; 99us; 135us; 99us; 136us; 99us; 137us; 99us; 138us; 99us; 139us; 99us; 140us; 99us; 141us; 99us; 142us; 99us; 143us; 99us; 144us; 99us; 145us; 99us; 146us; 99us; 147us; 99us; 148us; 99us; 149us; 99us; 152us; 99us; 153us; 99us; 161us; 163us; 164us; 99us; 172us; 99us; 176us; 181us; 178us; 181us; 46us; 65535us; 37us; 96us; 40us; 96us; 43us; 96us; 50us; 96us; 56us; 96us; 58us; 96us; 59us; 96us; 62us; 96us; 64us; 96us; 67us; 96us; 71us; 96us; 74us; 96us; 78us; 96us; 80us; 96us; 82us; 96us; 84us; 96us; 90us; 96us; 92us; 96us; 101us; 96us; 105us; 96us; 108us; 96us; 110us; 111us; 112us; 96us; 114us; 96us; 135us; 96us; 136us; 96us; 137us; 96us; 138us; 96us; 139us; 96us; 140us; 96us; 141us; 96us; 142us; 96us; 143us; 96us; 144us; 96us; 145us; 96us; 146us; 96us; 147us; 96us; 148us; 96us; 149us; 96us; 152us; 96us; 153us; 95us; 155us; 156us; 158us; 159us; 161us; 162us; 164us; 96us; 172us; 96us; 1us; 65535us; 105us; 106us; 2us; 65535us; 105us; 171us; 172us; 173us; 1us; 65535us; 178us; 179us; 2us; 65535us; 176us; 177us; 178us; 174us; 3us; 65535us; 101us; 102us; 176us; 175us; 178us; 175us; 45us; 65535us; 37us; 150us; 40us; 150us; 43us; 150us; 50us; 150us; 56us; 150us; 58us; 150us; 59us; 150us; 62us; 150us; 64us; 150us; 67us; 150us; 71us; 150us; 74us; 150us; 78us; 150us; 80us; 150us; 82us; 150us; 84us; 150us; 90us; 150us; 92us; 150us; 101us; 150us; 105us; 150us; 108us; 150us; 112us; 150us; 114us; 150us; 135us; 150us; 136us; 150us; 137us; 150us; 138us; 150us; 139us; 150us; 140us; 150us; 141us; 150us; 142us; 150us; 143us; 150us; 144us; 150us; 145us; 150us; 146us; 150us; 147us; 150us; 148us; 150us; 149us; 150us; 152us; 150us; 153us; 150us; 161us; 150us; 164us; 150us; 172us; 150us; 176us; 150us; 178us; 150us; 45us; 65535us; 37us; 151us; 40us; 151us; 43us; 151us; 50us; 151us; 56us; 151us; 58us; 151us; 59us; 151us; 62us; 151us; 64us; 151us; 67us; 151us; 71us; 151us; 74us; 151us; 78us; 151us; 80us; 151us; 82us; 151us; 84us; 151us; 90us; 151us; 92us; 151us; 101us; 151us; 105us; 151us; 108us; 151us; 112us; 151us; 114us; 151us; 135us; 151us; 136us; 151us; 137us; 151us; 138us; 151us; 139us; 151us; 140us; 151us; 141us; 151us; 142us; 151us; 143us; 151us; 144us; 151us; 145us; 151us; 146us; 151us; 147us; 151us; 148us; 151us; 149us; 151us; 152us; 151us; 153us; 151us; 161us; 151us; 164us; 151us; 172us; 151us; 176us; 151us; 178us; 151us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 45us; 49us; 57us; 67us; 77us; 80us; 83us; 126us; 169us; 215us; 262us; 264us; 267us; 269us; 272us; 276us; 322us; 368us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 28us; 33us; 1us; 23us; 15us; 24us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 15us; 26us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 1us; 26us; 1us; 27us; 3us; 28us; 33us; 34us; 3us; 28us; 33us; 34us; 17us; 28us; 33us; 34us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 3us; 28us; 33us; 34us; 2us; 28us; 33us; 1us; 28us; 2us; 29us; 35us; 2us; 29us; 35us; 16us; 29us; 35us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 2us; 29us; 35us; 1us; 29us; 1us; 30us; 1us; 30us; 15us; 30us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 15us; 31us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 1us; 31us; 1us; 32us; 1us; 32us; 15us; 32us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 1us; 32us; 15us; 32us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 1us; 32us; 15us; 32us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 37us; 2us; 38us; 39us; 16us; 38us; 39us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 2us; 38us; 39us; 2us; 38us; 39us; 1us; 39us; 6us; 40us; 43us; 44us; 70us; 73us; 74us; 5us; 40us; 43us; 44us; 73us; 74us; 1us; 41us; 2us; 41us; 67us; 1us; 42us; 2us; 42us; 84us; 2us; 43us; 44us; 1us; 43us; 15us; 44us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 2us; 45us; 69us; 1us; 45us; 1us; 45us; 1us; 45us; 1us; 46us; 15us; 46us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 1us; 47us; 3us; 47us; 73us; 74us; 1us; 48us; 15us; 48us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 1us; 49us; 15us; 49us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 1us; 50us; 15us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 59us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 63us; 64us; 14us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 15us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 64us; 15us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 74us; 16us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 77us; 78us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 2us; 67us; 70us; 1us; 67us; 1us; 68us; 3us; 68us; 73us; 74us; 1us; 69us; 1us; 70us; 3us; 70us; 73us; 74us; 1us; 70us; 2us; 71us; 72us; 3us; 71us; 73us; 74us; 1us; 72us; 2us; 73us; 74us; 2us; 73us; 85us; 1us; 73us; 1us; 73us; 1us; 73us; 1us; 73us; 1us; 74us; 1us; 76us; 1us; 78us; 1us; 78us; 1us; 80us; 2us; 81us; 82us; 1us; 82us; 1us; 82us; 1us; 83us; 1us; 83us; 1us; 83us; 1us; 84us; 1us; 85us; 1us; 86us; 1us; 87us; 1us; 87us; 1us; 88us; 1us; 89us; 1us; 90us; 1us; 91us; 1us; 92us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 124us; 126us; 129us; 131us; 147us; 149us; 151us; 155us; 159us; 177us; 181us; 184us; 186us; 189us; 192us; 209us; 212us; 214us; 216us; 218us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 262us; 264us; 266us; 268us; 284us; 286us; 302us; 304us; 320us; 322us; 324us; 326us; 328us; 330us; 332us; 335us; 352us; 355us; 358us; 360us; 367us; 373us; 375us; 378us; 380us; 383us; 386us; 388us; 404us; 407us; 409us; 411us; 413us; 415us; 431us; 433us; 437us; 439us; 455us; 457us; 473us; 475us; 491us; 507us; 523us; 539us; 555us; 571us; 587us; 603us; 619us; 635us; 651us; 667us; 683us; 699us; 714us; 730us; 746us; 763us; 765us; 767us; 769us; 771us; 773us; 775us; 777us; 779us; 781us; 783us; 785us; 787us; 789us; 791us; 793us; 795us; 797us; 799us; 802us; 804us; 806us; 810us; 812us; 814us; 818us; 820us; 823us; 827us; 829us; 832us; 835us; 837us; 839us; 841us; 843us; 845us; 847us; 849us; 851us; 853us; 856us; 858us; 860us; 862us; 864us; 866us; 868us; 870us; 872us; 874us; 876us; 878us; 880us; 882us; 884us; |]
let _fsyacc_action_rows = 191
let _fsyacc_actionTableElements = [|4us; 16386us; 28us; 189us; 31us; 188us; 36us; 23us; 39us; 190us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 4us; 16386us; 28us; 189us; 31us; 188us; 36us; 23us; 39us; 190us; 0us; 16387us; 1us; 32768us; 7us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 1us; 16us; 25us; 14us; 45us; 12us; 3us; 32768us; 1us; 16us; 25us; 14us; 45us; 13us; 1us; 16390us; 5us; 19us; 0us; 16391us; 1us; 16391us; 1us; 29us; 3us; 32768us; 1us; 16us; 25us; 14us; 45us; 12us; 1us; 16392us; 5us; 19us; 3us; 32768us; 1us; 16us; 25us; 14us; 45us; 12us; 2us; 32768us; 2us; 18us; 5us; 19us; 0us; 16393us; 2us; 32768us; 6us; 20us; 47us; 21us; 0us; 16394us; 1us; 32768us; 6us; 22us; 0us; 16395us; 1us; 32768us; 45us; 24us; 1us; 32768us; 1us; 25us; 3us; 16398us; 28us; 189us; 31us; 188us; 39us; 190us; 1us; 32768us; 2us; 27us; 1us; 32768us; 3us; 37us; 0us; 16396us; 3us; 16398us; 28us; 189us; 31us; 188us; 39us; 190us; 1us; 32768us; 2us; 31us; 1us; 32768us; 3us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 8us; 35us; 3us; 32768us; 28us; 189us; 31us; 188us; 39us; 190us; 0us; 16401us; 24us; 16403us; 1us; 153us; 3us; 37us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 28us; 189us; 30us; 55us; 31us; 188us; 32us; 186us; 33us; 114us; 34us; 116us; 35us; 50us; 37us; 61us; 38us; 112us; 39us; 190us; 40us; 66us; 42us; 71us; 43us; 77us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 1us; 32768us; 4us; 39us; 0us; 16402us; 24us; 16403us; 1us; 153us; 3us; 37us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 28us; 189us; 30us; 55us; 31us; 188us; 32us; 186us; 33us; 114us; 34us; 116us; 35us; 50us; 37us; 61us; 38us; 112us; 39us; 190us; 40us; 66us; 42us; 71us; 43us; 77us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 0us; 16404us; 1us; 32768us; 7us; 43us; 24us; 16403us; 1us; 153us; 3us; 37us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 28us; 189us; 30us; 55us; 31us; 188us; 32us; 186us; 33us; 114us; 34us; 116us; 35us; 50us; 37us; 61us; 38us; 112us; 39us; 190us; 40us; 66us; 42us; 71us; 43us; 77us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 29us; 59us; 0us; 16407us; 15us; 32768us; 7us; 49us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 0us; 16408us; 15us; 32768us; 1us; 153us; 7us; 51us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 0us; 16409us; 15us; 32768us; 7us; 53us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 1us; 56us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 15us; 32768us; 2us; 58us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 21us; 32768us; 1us; 153us; 3us; 37us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 30us; 55us; 32us; 186us; 33us; 114us; 34us; 116us; 35us; 50us; 37us; 61us; 38us; 112us; 40us; 66us; 42us; 71us; 43us; 77us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 21us; 32768us; 1us; 153us; 3us; 37us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 30us; 55us; 32us; 186us; 33us; 114us; 34us; 116us; 35us; 50us; 37us; 61us; 38us; 112us; 40us; 66us; 42us; 71us; 43us; 77us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 0us; 16412us; 1us; 32768us; 1us; 62us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 15us; 32768us; 2us; 64us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 21us; 32768us; 1us; 153us; 3us; 37us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 30us; 55us; 32us; 186us; 33us; 114us; 34us; 116us; 35us; 50us; 37us; 61us; 38us; 112us; 40us; 66us; 42us; 71us; 43us; 77us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 0us; 16413us; 1us; 32768us; 1us; 67us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 15us; 32768us; 2us; 69us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 1us; 16420us; 41us; 90us; 0us; 16414us; 21us; 32768us; 1us; 153us; 3us; 37us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 30us; 55us; 32us; 186us; 33us; 114us; 34us; 116us; 35us; 50us; 37us; 61us; 38us; 112us; 40us; 66us; 42us; 71us; 43us; 77us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 1us; 32768us; 37us; 73us; 1us; 32768us; 1us; 74us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 15us; 32768us; 2us; 76us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 0us; 16415us; 1us; 32768us; 1us; 78us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 15us; 32768us; 7us; 80us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 15us; 32768us; 7us; 82us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 15us; 32768us; 2us; 84us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 21us; 32768us; 1us; 153us; 3us; 37us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 30us; 55us; 32us; 186us; 33us; 114us; 34us; 116us; 35us; 50us; 37us; 61us; 38us; 112us; 40us; 66us; 42us; 71us; 43us; 77us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16421us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 15us; 32768us; 11us; 92us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 21us; 32768us; 1us; 153us; 3us; 37us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 30us; 55us; 32us; 186us; 33us; 114us; 34us; 116us; 35us; 50us; 37us; 61us; 38us; 112us; 40us; 66us; 42us; 71us; 43us; 77us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 1us; 16420us; 41us; 90us; 0us; 16423us; 3us; 16424us; 2us; 160us; 5us; 164us; 9us; 101us; 2us; 16424us; 5us; 164us; 9us; 101us; 0us; 16425us; 1us; 16425us; 2us; 154us; 0us; 16426us; 0us; 16426us; 15us; 32768us; 1us; 153us; 5us; 178us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 0us; 16427us; 14us; 16428us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 1us; 16453us; 1us; 105us; 14us; 16459us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 1us; 32768us; 2us; 107us; 0us; 16429us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 1us; 16430us; 12us; 135us; 3us; 32768us; 1us; 158us; 25us; 161us; 45us; 157us; 1us; 16431us; 5us; 164us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 16432us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 16433us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 0us; 16434us; 15us; 32768us; 11us; 136us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 14us; 16435us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 4us; 16436us; 12us; 135us; 25us; 139us; 26us; 140us; 27us; 141us; 4us; 16437us; 12us; 135us; 25us; 139us; 26us; 140us; 27us; 141us; 1us; 16438us; 12us; 135us; 1us; 16439us; 12us; 135us; 1us; 16440us; 12us; 135us; 10us; 16441us; 12us; 135us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 10us; 16442us; 12us; 135us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 10us; 16443us; 12us; 135us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 10us; 16444us; 12us; 135us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 10us; 16445us; 12us; 135us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 10us; 16446us; 12us; 135us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 12us; 16447us; 12us; 135us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 14us; 32768us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 13us; 16448us; 12us; 135us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 15us; 32768us; 6us; 170us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 15us; 16461us; 8us; 172us; 12us; 135us; 14us; 149us; 15us; 148us; 17us; 142us; 18us; 143us; 19us; 144us; 20us; 145us; 21us; 146us; 22us; 147us; 23us; 137us; 24us; 138us; 25us; 139us; 26us; 140us; 27us; 141us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 0us; 16449us; 0us; 16450us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 0us; 16451us; 3us; 32768us; 1us; 158us; 25us; 161us; 45us; 157us; 1us; 16452us; 5us; 164us; 0us; 16453us; 3us; 32768us; 1us; 158us; 25us; 161us; 45us; 157us; 2us; 32768us; 2us; 160us; 5us; 164us; 0us; 16454us; 9us; 32768us; 1us; 153us; 10us; 155us; 24us; 184us; 25us; 161us; 32us; 186us; 45us; 157us; 46us; 187us; 47us; 182us; 48us; 183us; 1us; 16455us; 5us; 164us; 0us; 16456us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 165us; 48us; 183us; 1us; 16469us; 6us; 166us; 1us; 32768us; 5us; 167us; 1us; 32768us; 47us; 168us; 1us; 32768us; 6us; 169us; 0us; 16457us; 0us; 16458us; 0us; 16460us; 14us; 32768us; 1us; 153us; 10us; 155us; 13us; 108us; 16us; 110us; 24us; 184us; 25us; 161us; 32us; 186us; 33us; 114us; 34us; 116us; 38us; 112us; 45us; 104us; 46us; 187us; 47us; 182us; 48us; 183us; 0us; 16462us; 0us; 16464us; 1us; 16465us; 8us; 176us; 8us; 32768us; 1us; 152us; 5us; 178us; 10us; 155us; 24us; 184us; 32us; 186us; 46us; 187us; 47us; 182us; 48us; 183us; 0us; 16466us; 8us; 16463us; 1us; 152us; 5us; 178us; 10us; 155us; 24us; 184us; 32us; 186us; 46us; 187us; 47us; 182us; 48us; 183us; 1us; 32768us; 6us; 180us; 0us; 16467us; 0us; 16468us; 0us; 16469us; 0us; 16470us; 1us; 32768us; 47us; 185us; 0us; 16471us; 0us; 16472us; 0us; 16473us; 0us; 16474us; 0us; 16475us; 0us; 16476us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 8us; 9us; 14us; 15us; 17us; 18us; 19us; 23us; 27us; 29us; 30us; 32us; 36us; 38us; 42us; 45us; 46us; 49us; 50us; 52us; 53us; 55us; 57us; 61us; 63us; 65us; 66us; 70us; 72us; 74us; 75us; 76us; 78us; 82us; 83us; 108us; 110us; 111us; 136us; 137us; 139us; 164us; 165us; 166us; 168us; 169us; 185us; 186us; 202us; 203us; 219us; 220us; 221us; 223us; 238us; 254us; 276us; 298us; 299us; 301us; 316us; 332us; 354us; 355us; 357us; 372us; 388us; 390us; 391us; 413us; 415us; 417us; 432us; 448us; 449us; 451us; 466us; 482us; 497us; 513us; 528us; 544us; 566us; 567us; 568us; 569us; 570us; 571us; 586us; 602us; 624us; 626us; 627us; 631us; 634us; 635us; 637us; 638us; 639us; 655us; 656us; 671us; 673us; 688us; 690us; 691us; 706us; 708us; 712us; 714us; 729us; 744us; 759us; 774us; 775us; 791us; 806us; 811us; 816us; 818us; 820us; 822us; 833us; 844us; 855us; 866us; 877us; 888us; 901us; 916us; 930us; 946us; 962us; 977us; 992us; 1007us; 1022us; 1037us; 1052us; 1067us; 1082us; 1097us; 1112us; 1127us; 1142us; 1157us; 1172us; 1187us; 1188us; 1189us; 1204us; 1219us; 1220us; 1224us; 1226us; 1227us; 1231us; 1234us; 1235us; 1245us; 1247us; 1248us; 1263us; 1265us; 1267us; 1269us; 1271us; 1272us; 1273us; 1274us; 1289us; 1290us; 1291us; 1293us; 1302us; 1303us; 1312us; 1314us; 1315us; 1316us; 1317us; 1318us; 1320us; 1321us; 1322us; 1323us; 1324us; 1325us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 5us; 6us; 9us; 7us; 5us; 5us; 0us; 1us; 4us; 5us; 1us; 1us; 1us; 3us; 3us; 4us; 2us; 2us; 2us; 2us; 1us; 5us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 7us; 4us; 0us; 1us; 1us; 3us; 0us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 25us; 25us; 26us; 27us; 27us; 27us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 16417us; 16418us; 16419us; 16421us; 65535us; 65535us; 65535us; 65535us; 16423us; 65535us; 65535us; 16425us; 65535us; 16426us; 65535us; 65535us; 16427us; 65535us; 65535us; 65535us; 65535us; 16429us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16434us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16449us; 16450us; 65535us; 65535us; 16451us; 65535us; 65535us; 16453us; 65535us; 65535us; 16454us; 65535us; 65535us; 16456us; 65535us; 65535us; 65535us; 65535us; 65535us; 16457us; 16458us; 16460us; 65535us; 16462us; 16464us; 65535us; 65535us; 16466us; 65535us; 65535us; 16467us; 16468us; 16469us; 16470us; 65535us; 16471us; 16472us; 16473us; 16474us; 16475us; 16476us; |]
let _fsyacc_reductions ()  =    [| 
# 484 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 493 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "CPar.fsy"
                                                               Prog _1 
                   )
# 45 "CPar.fsy"
                 : Absyn.program));
# 504 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "CPar.fsy"
                                                               [] 
                   )
# 49 "CPar.fsy"
                 : 'Topdecs));
# 514 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 50 "CPar.fsy"
                 : 'Topdecs));
# 526 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 54 "CPar.fsy"
                 : 'Topdec));
# 537 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CPar.fsy"
                                                               _1 
                   )
# 55 "CPar.fsy"
                 : 'Topdec));
# 548 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 59 "CPar.fsy"
                 : 'Vardec));
# 560 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 63 "CPar.fsy"
                 : 'Vardesc));
# 571 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 64 "CPar.fsy"
                 : 'Vardesc));
# 582 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CPar.fsy"
                                                               _2                                      
                   )
# 65 "CPar.fsy"
                 : 'Vardesc));
# 593 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 66 "CPar.fsy"
                 : 'Vardesc));
# 604 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 67 "CPar.fsy"
                 : 'Vardesc));
# 616 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 71 "CPar.fsy"
                 : 'Fundec));
# 629 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 72 "CPar.fsy"
                 : 'Fundec));
# 643 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "CPar.fsy"
                                                               [] 
                   )
# 76 "CPar.fsy"
                 : 'Paramdecs));
# 653 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CPar.fsy"
                                                               _1 
                   )
# 77 "CPar.fsy"
                 : 'Paramdecs));
# 664 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "CPar.fsy"
                                                               [_1]     
                   )
# 81 "CPar.fsy"
                 : 'Paramdecs1));
# 675 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 82 "CPar.fsy"
                 : 'Paramdecs1));
# 687 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "CPar.fsy"
                                                               Block _2 
                   )
# 86 "CPar.fsy"
                 : 'Block));
# 698 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CPar.fsy"
                                                               [] 
                   )
# 90 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 708 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 91 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 720 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 92 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 732 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "CPar.fsy"
                                                               _1 
                   )
# 96 "CPar.fsy"
                 : 'Stmt));
# 743 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "CPar.fsy"
                                                               _1 
                   )
# 97 "CPar.fsy"
                 : 'Stmt));
# 754 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 101 "CPar.fsy"
                 : 'StmtM));
# 765 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               Return None          
                   )
# 102 "CPar.fsy"
                 : 'StmtM));
# 775 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 103 "CPar.fsy"
                 : 'StmtM));
# 786 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CPar.fsy"
                                                               _1                   
                   )
# 104 "CPar.fsy"
                 : 'StmtM));
# 797 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 105 "CPar.fsy"
                 : 'StmtM));
# 810 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 106 "CPar.fsy"
                 : 'StmtM));
# 822 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CPar.fsy"
                                                               Switch(_3, _5)       
                   )
# 107 "CPar.fsy"
                 : 'StmtM));
# 834 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CPar.fsy"
                                                               Do(_2, _5)           
                   )
# 108 "CPar.fsy"
                 : 'StmtM));
# 846 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "CPar.fsy"
                                                                        For(_3, _5, _7, _9)      
                   )
# 109 "CPar.fsy"
                 : 'StmtM));
# 860 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 113 "CPar.fsy"
                 : 'StmtU));
# 873 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 114 "CPar.fsy"
                 : 'StmtU));
# 885 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 115 "CPar.fsy"
                 : 'StmtU));
# 897 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "CPar.fsy"
                                                               []       
                   )
# 119 "CPar.fsy"
                 : 'Stmts));
# 907 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmts1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "CPar.fsy"
                                                               _1       
                   )
# 120 "CPar.fsy"
                 : 'Stmts));
# 918 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "CPar.fsy"
                                                              [(_2, _4)]     
                   )
# 124 "CPar.fsy"
                 : 'Stmts1));
# 930 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "CPar.fsy"
                                                              (_2, _4) :: _5 
                   )
# 125 "CPar.fsy"
                 : 'Stmts1));
# 943 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "CPar.fsy"
                                                               Access _1           
                   )
# 129 "CPar.fsy"
                 : 'Expr));
# 954 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CPar.fsy"
                                                               _1                  
                   )
# 130 "CPar.fsy"
                 : 'Expr));
# 965 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               _1                  
                   )
# 135 "CPar.fsy"
                 : 'ExprNotAccess));
# 976 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Assign2(_1, _3)     
                   )
# 136 "CPar.fsy"
                 : 'ExprNotAccess));
# 988 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 137 "CPar.fsy"
                 : 'ExprNotAccess));
# 1000 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 138 "CPar.fsy"
                 : 'ExprNotAccess));
# 1012 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 139 "CPar.fsy"
                 : 'ExprNotAccess));
# 1023 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "CPar.fsy"
                                                               Assign(_2, Prim2("+", Access(_2), CstI 1)) 
                   )
# 140 "CPar.fsy"
                 : 'ExprNotAccess));
# 1034 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               Prim1("printch", _2) 
                   )
# 141 "CPar.fsy"
                 : 'ExprNotAccess));
# 1045 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 142 "CPar.fsy"
                 : 'ExprNotAccess));
# 1056 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 143 "CPar.fsy"
                 : 'ExprNotAccess));
# 1066 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "CPar.fsy"
                                                               Selection(_1, _3, _5) 
                   )
# 144 "CPar.fsy"
                 : 'ExprNotAccess));
# 1079 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 145 "CPar.fsy"
                 : 'ExprNotAccess));
# 1091 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 146 "CPar.fsy"
                 : 'ExprNotAccess));
# 1103 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 147 "CPar.fsy"
                 : 'ExprNotAccess));
# 1115 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 148 "CPar.fsy"
                 : 'ExprNotAccess));
# 1127 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 149 "CPar.fsy"
                 : 'ExprNotAccess));
# 1139 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 150 "CPar.fsy"
                 : 'ExprNotAccess));
# 1151 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 151 "CPar.fsy"
                 : 'ExprNotAccess));
# 1163 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 152 "CPar.fsy"
                 : 'ExprNotAccess));
# 1175 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 153 "CPar.fsy"
                 : 'ExprNotAccess));
# 1187 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 154 "CPar.fsy"
                 : 'ExprNotAccess));
# 1199 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 155 "CPar.fsy"
                 : 'ExprNotAccess));
# 1211 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 156 "CPar.fsy"
                 : 'ExprNotAccess));
# 1223 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 157 "CPar.fsy"
                 : 'ExprNotAccess));
# 1235 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               CstI _1             
                   )
# 161 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1246 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "CPar.fsy"
                                                               CstC _1             
                   )
# 162 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1257 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "CPar.fsy"
                                                               _2                  
                   )
# 163 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1268 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "CPar.fsy"
                                                               Addr _2             
                   )
# 164 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1279 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "CPar.fsy"
                                                               AccVar _1           
                   )
# 168 "CPar.fsy"
                 : 'Access));
# 1290 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "CPar.fsy"
                                                               _2                  
                   )
# 169 "CPar.fsy"
                 : 'Access));
# 1301 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 170 "CPar.fsy"
                 : 'Access));
# 1312 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 171 "CPar.fsy"
                 : 'Access));
# 1323 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "CPar.fsy"
                                                                              AccIndex2(_1, Some _3, Some _6) 
                   )
# 172 "CPar.fsy"
                 : 'Access));
# 1336 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 173 "CPar.fsy"
                 : 'Access));
# 1348 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "CPar.fsy"
                                                               []       
                   )
# 177 "CPar.fsy"
                 : 'Exprs));
# 1358 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "CPar.fsy"
                                                               _1       
                   )
# 178 "CPar.fsy"
                 : 'Exprs));
# 1369 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "CPar.fsy"
                                                               [_1]     
                   )
# 182 "CPar.fsy"
                 : 'Exprs1));
# 1380 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 183 "CPar.fsy"
                 : 'Exprs1));
# 1392 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "CPar.fsy"
                                                               [] 
                   )
# 187 "CPar.fsy"
                 : 'LExprs));
# 1402 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "CPar.fsy"
                                                               _1 
                   )
# 188 "CPar.fsy"
                 : 'LExprs));
# 1413 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "CPar.fsy"
                                                               [_1]  
                   )
# 192 "CPar.fsy"
                 : 'LExprs1));
# 1424 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 193 "CPar.fsy"
                 : 'LExprs1));
# 1436 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "CPar.fsy"
                                                               LNode _2
                   )
# 197 "CPar.fsy"
                 : 'LExpr));
# 1447 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "CPar.fsy"
                                                               CNode _1
                   )
# 198 "CPar.fsy"
                 : 'LExpr));
# 1458 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "CPar.fsy"
                                                               _1       
                   )
# 202 "CPar.fsy"
                 : 'Const));
# 1469 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "CPar.fsy"
                                                               _1       
                   )
# 203 "CPar.fsy"
                 : 'Const));
# 1480 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "CPar.fsy"
                                                               - _2     
                   )
# 204 "CPar.fsy"
                 : 'Const));
# 1491 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "CPar.fsy"
                                                               -1       
                   )
# 205 "CPar.fsy"
                 : 'Const));
# 1501 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "CPar.fsy"
                                                               _1       
                   )
# 209 "CPar.fsy"
                 : 'Const2));
# 1512 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "CPar.fsy"
                                                               TypI     
                   )
# 213 "CPar.fsy"
                 : 'Type));
# 1522 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "CPar.fsy"
                                                               TypC     
                   )
# 214 "CPar.fsy"
                 : 'Type));
# 1532 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "CPar.fsy"
                                                               TypL     
                   )
# 215 "CPar.fsy"
                 : 'Type));
|]
# 1543 "CPar.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 52;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
