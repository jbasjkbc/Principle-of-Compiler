// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 22 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | COLON
  | NOT
  | SEQOR
  | SEQAND
  | SELFPLUS
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | PRINTCH
  | LIST
  | SWITCH
  | CASE
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTCHAR of (char)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_COLON
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_SELFPLUS
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_PRINTCH
    | TOKEN_LIST
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTCHAR
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Stmts
    | NONTERM_Stmts1
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_LExprs
    | NONTERM_LExprs1
    | NONTERM_LExpr
    | NONTERM_Const
    | NONTERM_Const2
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | COLON  -> 11 
  | NOT  -> 12 
  | SEQOR  -> 13 
  | SEQAND  -> 14 
  | SELFPLUS  -> 15 
  | EQ  -> 16 
  | NE  -> 17 
  | GT  -> 18 
  | LT  -> 19 
  | GE  -> 20 
  | LE  -> 21 
  | PLUS  -> 22 
  | MINUS  -> 23 
  | TIMES  -> 24 
  | DIV  -> 25 
  | MOD  -> 26 
  | CHAR  -> 27 
  | ELSE  -> 28 
  | IF  -> 29 
  | INT  -> 30 
  | NULL  -> 31 
  | PRINT  -> 32 
  | PRINTLN  -> 33 
  | RETURN  -> 34 
  | VOID  -> 35 
  | WHILE  -> 36 
  | PRINTCH  -> 37 
  | LIST  -> 38 
  | SWITCH  -> 39 
  | CASE  -> 40 
  | CSTSTRING _ -> 41 
  | NAME _ -> 42 
  | CSTCHAR _ -> 43 
  | CSTINT _ -> 44 
  | CSTBOOL _ -> 45 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_COLON 
  | 12 -> TOKEN_NOT 
  | 13 -> TOKEN_SEQOR 
  | 14 -> TOKEN_SEQAND 
  | 15 -> TOKEN_SELFPLUS 
  | 16 -> TOKEN_EQ 
  | 17 -> TOKEN_NE 
  | 18 -> TOKEN_GT 
  | 19 -> TOKEN_LT 
  | 20 -> TOKEN_GE 
  | 21 -> TOKEN_LE 
  | 22 -> TOKEN_PLUS 
  | 23 -> TOKEN_MINUS 
  | 24 -> TOKEN_TIMES 
  | 25 -> TOKEN_DIV 
  | 26 -> TOKEN_MOD 
  | 27 -> TOKEN_CHAR 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_INT 
  | 31 -> TOKEN_NULL 
  | 32 -> TOKEN_PRINT 
  | 33 -> TOKEN_PRINTLN 
  | 34 -> TOKEN_RETURN 
  | 35 -> TOKEN_VOID 
  | 36 -> TOKEN_WHILE 
  | 37 -> TOKEN_PRINTCH 
  | 38 -> TOKEN_LIST 
  | 39 -> TOKEN_SWITCH 
  | 40 -> TOKEN_CASE 
  | 41 -> TOKEN_CSTSTRING 
  | 42 -> TOKEN_NAME 
  | 43 -> TOKEN_CSTCHAR 
  | 44 -> TOKEN_CSTINT 
  | 45 -> TOKEN_CSTBOOL 
  | 48 -> TOKEN_end_of_input
  | 46 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtU 
    | 32 -> NONTERM_StmtU 
    | 33 -> NONTERM_StmtU 
    | 34 -> NONTERM_Stmts 
    | 35 -> NONTERM_Stmts 
    | 36 -> NONTERM_Stmts1 
    | 37 -> NONTERM_Stmts1 
    | 38 -> NONTERM_Expr 
    | 39 -> NONTERM_Expr 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_AtExprNotAccess 
    | 63 -> NONTERM_AtExprNotAccess 
    | 64 -> NONTERM_AtExprNotAccess 
    | 65 -> NONTERM_AtExprNotAccess 
    | 66 -> NONTERM_Access 
    | 67 -> NONTERM_Access 
    | 68 -> NONTERM_Access 
    | 69 -> NONTERM_Access 
    | 70 -> NONTERM_Access 
    | 71 -> NONTERM_Access 
    | 72 -> NONTERM_Exprs 
    | 73 -> NONTERM_Exprs 
    | 74 -> NONTERM_Exprs1 
    | 75 -> NONTERM_Exprs1 
    | 76 -> NONTERM_LExprs 
    | 77 -> NONTERM_LExprs 
    | 78 -> NONTERM_LExprs1 
    | 79 -> NONTERM_LExprs1 
    | 80 -> NONTERM_LExpr 
    | 81 -> NONTERM_LExpr 
    | 82 -> NONTERM_Const 
    | 83 -> NONTERM_Const 
    | 84 -> NONTERM_Const 
    | 85 -> NONTERM_Const 
    | 86 -> NONTERM_Const2 
    | 87 -> NONTERM_Type 
    | 88 -> NONTERM_Type 
    | 89 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 48 
let _fsyacc_tagOfErrorTerminal = 46

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | COLON  -> "COLON" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | SELFPLUS  -> "SELFPLUS" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | PRINTCH  -> "PRINTCH" 
  | LIST  -> "LIST" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTCHAR _ -> "CSTCHAR" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | SELFPLUS  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | PRINTCH  -> (null : System.Object) 
  | LIST  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTCHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 9us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 58us; 54us; 59us; 54us; 64us; 54us; 77us; 54us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 5us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 58us; 72us; 77us; 78us; 7us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 58us; 46us; 59us; 60us; 64us; 65us; 77us; 45us; 7us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 58us; 47us; 59us; 71us; 64us; 73us; 77us; 47us; 2us; 65535us; 69us; 70us; 78us; 79us; 2us; 65535us; 69us; 74us; 78us; 74us; 35us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 56us; 57us; 58us; 48us; 59us; 48us; 62us; 63us; 64us; 48us; 67us; 68us; 75us; 76us; 77us; 48us; 86us; 88us; 90us; 118us; 93us; 94us; 97us; 98us; 99us; 100us; 119us; 102us; 120us; 103us; 121us; 104us; 122us; 105us; 123us; 106us; 124us; 107us; 125us; 108us; 126us; 109us; 127us; 110us; 128us; 111us; 129us; 112us; 130us; 113us; 131us; 115us; 134us; 114us; 135us; 114us; 146us; 116us; 148us; 117us; 151us; 118us; 35us; 65535us; 37us; 82us; 40us; 82us; 43us; 82us; 50us; 82us; 56us; 82us; 58us; 82us; 59us; 82us; 62us; 82us; 64us; 82us; 67us; 82us; 75us; 82us; 77us; 82us; 86us; 82us; 90us; 82us; 93us; 82us; 97us; 82us; 99us; 82us; 119us; 82us; 120us; 82us; 121us; 82us; 122us; 82us; 123us; 82us; 124us; 82us; 125us; 82us; 126us; 82us; 127us; 82us; 128us; 82us; 129us; 82us; 130us; 82us; 131us; 82us; 134us; 83us; 135us; 83us; 146us; 82us; 148us; 82us; 151us; 82us; 38us; 65535us; 37us; 84us; 40us; 84us; 43us; 84us; 50us; 84us; 56us; 84us; 58us; 84us; 59us; 84us; 62us; 84us; 64us; 84us; 67us; 84us; 75us; 84us; 77us; 84us; 86us; 85us; 90us; 84us; 93us; 84us; 97us; 84us; 99us; 84us; 119us; 84us; 120us; 84us; 121us; 84us; 122us; 84us; 123us; 84us; 124us; 84us; 125us; 84us; 126us; 84us; 127us; 84us; 128us; 84us; 129us; 84us; 130us; 84us; 131us; 84us; 134us; 84us; 135us; 84us; 143us; 145us; 146us; 84us; 148us; 84us; 151us; 84us; 155us; 160us; 157us; 160us; 39us; 65535us; 37us; 81us; 40us; 81us; 43us; 81us; 50us; 81us; 56us; 81us; 58us; 81us; 59us; 81us; 62us; 81us; 64us; 81us; 67us; 81us; 75us; 81us; 77us; 81us; 86us; 81us; 90us; 81us; 93us; 81us; 95us; 96us; 97us; 81us; 99us; 81us; 119us; 81us; 120us; 81us; 121us; 81us; 122us; 81us; 123us; 81us; 124us; 81us; 125us; 81us; 126us; 81us; 127us; 81us; 128us; 81us; 129us; 81us; 130us; 81us; 131us; 81us; 134us; 81us; 135us; 80us; 137us; 138us; 140us; 141us; 143us; 144us; 146us; 81us; 148us; 81us; 151us; 81us; 1us; 65535us; 90us; 91us; 2us; 65535us; 90us; 150us; 151us; 152us; 1us; 65535us; 157us; 158us; 2us; 65535us; 155us; 156us; 157us; 153us; 3us; 65535us; 86us; 87us; 155us; 154us; 157us; 154us; 38us; 65535us; 37us; 132us; 40us; 132us; 43us; 132us; 50us; 132us; 56us; 132us; 58us; 132us; 59us; 132us; 62us; 132us; 64us; 132us; 67us; 132us; 75us; 132us; 77us; 132us; 86us; 132us; 90us; 132us; 93us; 132us; 97us; 132us; 99us; 132us; 119us; 132us; 120us; 132us; 121us; 132us; 122us; 132us; 123us; 132us; 124us; 132us; 125us; 132us; 126us; 132us; 127us; 132us; 128us; 132us; 129us; 132us; 130us; 132us; 131us; 132us; 134us; 132us; 135us; 132us; 143us; 132us; 146us; 132us; 148us; 132us; 151us; 132us; 155us; 132us; 157us; 132us; 38us; 65535us; 37us; 133us; 40us; 133us; 43us; 133us; 50us; 133us; 56us; 133us; 58us; 133us; 59us; 133us; 62us; 133us; 64us; 133us; 67us; 133us; 75us; 133us; 77us; 133us; 86us; 133us; 90us; 133us; 93us; 133us; 97us; 133us; 99us; 133us; 119us; 133us; 120us; 133us; 121us; 133us; 122us; 133us; 123us; 133us; 124us; 133us; 125us; 133us; 126us; 133us; 127us; 133us; 128us; 133us; 129us; 133us; 130us; 133us; 131us; 133us; 134us; 133us; 135us; 133us; 143us; 133us; 146us; 133us; 148us; 133us; 151us; 133us; 155us; 133us; 157us; 133us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 43us; 47us; 53us; 61us; 69us; 72us; 75us; 111us; 147us; 186us; 226us; 228us; 231us; 233us; 236us; 240us; 279us; 318us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 28us; 31us; 1us; 23us; 14us; 24us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 14us; 26us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 1us; 26us; 1us; 27us; 3us; 28us; 31us; 32us; 3us; 28us; 31us; 32us; 16us; 28us; 31us; 32us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 3us; 28us; 31us; 32us; 2us; 28us; 31us; 1us; 28us; 2us; 29us; 33us; 2us; 29us; 33us; 15us; 29us; 33us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 2us; 29us; 33us; 1us; 29us; 1us; 30us; 1us; 30us; 14us; 30us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 35us; 2us; 36us; 37us; 15us; 36us; 37us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 2us; 36us; 37us; 2us; 36us; 37us; 1us; 37us; 6us; 38us; 41us; 42us; 67us; 70us; 71us; 5us; 38us; 41us; 42us; 70us; 71us; 1us; 39us; 2us; 39us; 64us; 1us; 40us; 2us; 40us; 81us; 2us; 41us; 42us; 1us; 41us; 14us; 42us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 2us; 43us; 66us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 44us; 14us; 44us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 1us; 45us; 3us; 45us; 70us; 71us; 1us; 46us; 14us; 46us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 1us; 47us; 14us; 47us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 1us; 48us; 14us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 14us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 14us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 14us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 14us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 14us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 14us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 14us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 58us; 59us; 60us; 61us; 14us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 58us; 59us; 60us; 61us; 14us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 58us; 59us; 60us; 61us; 14us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 59us; 60us; 61us; 14us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 60us; 61us; 13us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 14us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 61us; 15us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 70us; 71us; 14us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 70us; 15us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 74us; 75us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 2us; 64us; 67us; 1us; 64us; 1us; 65us; 3us; 65us; 70us; 71us; 1us; 66us; 1us; 67us; 3us; 67us; 70us; 71us; 1us; 67us; 2us; 68us; 69us; 3us; 68us; 70us; 71us; 1us; 69us; 2us; 70us; 71us; 2us; 70us; 71us; 1us; 70us; 1us; 70us; 1us; 73us; 1us; 75us; 1us; 75us; 1us; 77us; 2us; 78us; 79us; 1us; 79us; 1us; 79us; 1us; 80us; 1us; 80us; 1us; 80us; 1us; 81us; 1us; 82us; 1us; 83us; 1us; 84us; 1us; 84us; 1us; 85us; 1us; 86us; 1us; 87us; 1us; 88us; 1us; 89us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 123us; 125us; 128us; 130us; 145us; 147us; 149us; 153us; 157us; 174us; 178us; 181us; 183us; 186us; 189us; 205us; 208us; 210us; 212us; 214us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 244us; 260us; 263us; 266us; 268us; 275us; 281us; 283us; 286us; 288us; 291us; 294us; 296us; 311us; 314us; 316us; 318us; 320us; 322us; 337us; 339us; 343us; 345us; 360us; 362us; 377us; 379us; 394us; 409us; 424us; 439us; 454us; 469us; 484us; 499us; 514us; 529us; 544us; 559us; 573us; 588us; 604us; 619us; 635us; 637us; 639us; 641us; 643us; 645us; 647us; 649us; 651us; 653us; 655us; 657us; 659us; 661us; 663us; 665us; 667us; 670us; 672us; 674us; 678us; 680us; 682us; 686us; 688us; 691us; 695us; 697us; 700us; 703us; 705us; 707us; 709us; 711us; 713us; 715us; 718us; 720us; 722us; 724us; 726us; 728us; 730us; 732us; 734us; 736us; 738us; 740us; 742us; 744us; 746us; |]
let _fsyacc_action_rows = 170
let _fsyacc_actionTableElements = [|4us; 16386us; 27us; 168us; 30us; 167us; 35us; 23us; 38us; 169us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 4us; 16386us; 27us; 168us; 30us; 167us; 35us; 23us; 38us; 169us; 0us; 16387us; 1us; 32768us; 7us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 1us; 16us; 24us; 14us; 42us; 12us; 3us; 32768us; 1us; 16us; 24us; 14us; 42us; 13us; 1us; 16390us; 5us; 19us; 0us; 16391us; 1us; 16391us; 1us; 29us; 3us; 32768us; 1us; 16us; 24us; 14us; 42us; 12us; 1us; 16392us; 5us; 19us; 3us; 32768us; 1us; 16us; 24us; 14us; 42us; 12us; 2us; 32768us; 2us; 18us; 5us; 19us; 0us; 16393us; 2us; 32768us; 6us; 20us; 44us; 21us; 0us; 16394us; 1us; 32768us; 6us; 22us; 0us; 16395us; 1us; 32768us; 42us; 24us; 1us; 32768us; 1us; 25us; 3us; 16398us; 27us; 168us; 30us; 167us; 38us; 169us; 1us; 32768us; 2us; 27us; 1us; 32768us; 3us; 37us; 0us; 16396us; 3us; 16398us; 27us; 168us; 30us; 167us; 38us; 169us; 1us; 32768us; 2us; 31us; 1us; 32768us; 3us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 8us; 35us; 3us; 32768us; 27us; 168us; 30us; 167us; 38us; 169us; 0us; 16401us; 22us; 16403us; 1us; 135us; 3us; 37us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 27us; 168us; 29us; 55us; 30us; 167us; 31us; 165us; 32us; 99us; 33us; 101us; 34us; 50us; 36us; 61us; 37us; 97us; 38us; 169us; 39us; 66us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 1us; 32768us; 4us; 39us; 0us; 16402us; 22us; 16403us; 1us; 135us; 3us; 37us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 27us; 168us; 29us; 55us; 30us; 167us; 31us; 165us; 32us; 99us; 33us; 101us; 34us; 50us; 36us; 61us; 37us; 97us; 38us; 169us; 39us; 66us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16404us; 1us; 32768us; 7us; 43us; 22us; 16403us; 1us; 135us; 3us; 37us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 27us; 168us; 29us; 55us; 30us; 167us; 31us; 165us; 32us; 99us; 33us; 101us; 34us; 50us; 36us; 61us; 37us; 97us; 38us; 169us; 39us; 66us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 28us; 59us; 0us; 16407us; 14us; 32768us; 7us; 49us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 0us; 16408us; 15us; 32768us; 1us; 135us; 7us; 51us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16409us; 14us; 32768us; 7us; 53us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 1us; 56us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 2us; 58us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 19us; 32768us; 1us; 135us; 3us; 37us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 29us; 55us; 31us; 165us; 32us; 99us; 33us; 101us; 34us; 50us; 36us; 61us; 37us; 97us; 39us; 66us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 19us; 32768us; 1us; 135us; 3us; 37us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 29us; 55us; 31us; 165us; 32us; 99us; 33us; 101us; 34us; 50us; 36us; 61us; 37us; 97us; 39us; 66us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16412us; 1us; 32768us; 1us; 62us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 2us; 64us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 19us; 32768us; 1us; 135us; 3us; 37us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 29us; 55us; 31us; 165us; 32us; 99us; 33us; 101us; 34us; 50us; 36us; 61us; 37us; 97us; 39us; 66us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16413us; 1us; 32768us; 1us; 67us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 2us; 69us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 1us; 16418us; 40us; 75us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16419us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 11us; 77us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 19us; 32768us; 1us; 135us; 3us; 37us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 29us; 55us; 31us; 165us; 32us; 99us; 33us; 101us; 34us; 50us; 36us; 61us; 37us; 97us; 39us; 66us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 1us; 16418us; 40us; 75us; 0us; 16421us; 3us; 16422us; 2us; 142us; 5us; 146us; 9us; 86us; 2us; 16422us; 5us; 146us; 9us; 86us; 0us; 16423us; 1us; 16423us; 2us; 136us; 0us; 16424us; 0us; 16424us; 15us; 32768us; 1us; 135us; 5us; 157us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16425us; 13us; 16426us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 1us; 16450us; 1us; 90us; 14us; 16456us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 1us; 32768us; 2us; 92us; 0us; 16427us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16428us; 3us; 32768us; 1us; 140us; 24us; 143us; 42us; 139us; 1us; 16429us; 5us; 146us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 13us; 16430us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 13us; 16431us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 0us; 16432us; 3us; 16433us; 24us; 121us; 25us; 122us; 26us; 123us; 3us; 16434us; 24us; 121us; 25us; 122us; 26us; 123us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 9us; 16438us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 9us; 16439us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 9us; 16440us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 9us; 16441us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 9us; 16442us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 9us; 16443us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 11us; 16444us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 13us; 32768us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 12us; 16445us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 14us; 32768us; 6us; 147us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 14us; 32768us; 6us; 149us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 14us; 16458us; 8us; 151us; 13us; 131us; 14us; 130us; 16us; 124us; 17us; 125us; 18us; 126us; 19us; 127us; 20us; 128us; 21us; 129us; 22us; 119us; 23us; 120us; 24us; 121us; 25us; 122us; 26us; 123us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16446us; 0us; 16447us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16448us; 3us; 32768us; 1us; 140us; 24us; 143us; 42us; 139us; 1us; 16449us; 5us; 146us; 0us; 16450us; 3us; 32768us; 1us; 140us; 24us; 143us; 42us; 139us; 2us; 32768us; 2us; 142us; 5us; 146us; 0us; 16451us; 9us; 32768us; 1us; 135us; 10us; 137us; 23us; 163us; 24us; 143us; 31us; 165us; 42us; 139us; 43us; 166us; 44us; 161us; 45us; 162us; 1us; 16452us; 5us; 146us; 0us; 16453us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 1us; 16455us; 5us; 148us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16454us; 0us; 16457us; 14us; 32768us; 1us; 135us; 10us; 137us; 12us; 93us; 15us; 95us; 23us; 163us; 24us; 143us; 31us; 165us; 32us; 99us; 33us; 101us; 37us; 97us; 42us; 89us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16459us; 0us; 16461us; 1us; 16462us; 8us; 155us; 8us; 32768us; 1us; 134us; 5us; 157us; 10us; 137us; 23us; 163us; 31us; 165us; 43us; 166us; 44us; 161us; 45us; 162us; 0us; 16463us; 8us; 16460us; 1us; 134us; 5us; 157us; 10us; 137us; 23us; 163us; 31us; 165us; 43us; 166us; 44us; 161us; 45us; 162us; 1us; 32768us; 6us; 159us; 0us; 16464us; 0us; 16465us; 0us; 16466us; 0us; 16467us; 1us; 32768us; 44us; 164us; 0us; 16468us; 0us; 16469us; 0us; 16470us; 0us; 16471us; 0us; 16472us; 0us; 16473us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 8us; 9us; 14us; 15us; 17us; 18us; 19us; 23us; 27us; 29us; 30us; 32us; 36us; 38us; 42us; 45us; 46us; 49us; 50us; 52us; 53us; 55us; 57us; 61us; 63us; 65us; 66us; 70us; 72us; 74us; 75us; 76us; 78us; 82us; 83us; 106us; 108us; 109us; 132us; 133us; 135us; 158us; 159us; 160us; 162us; 163us; 178us; 179us; 195us; 196us; 211us; 212us; 213us; 215us; 230us; 245us; 265us; 285us; 286us; 288us; 303us; 318us; 338us; 339us; 341us; 356us; 371us; 373us; 374us; 375us; 376us; 377us; 378us; 393us; 408us; 428us; 430us; 431us; 435us; 438us; 439us; 441us; 442us; 443us; 459us; 460us; 474us; 476us; 491us; 493us; 494us; 509us; 510us; 514us; 516us; 531us; 545us; 560us; 574us; 575us; 579us; 583us; 584us; 585us; 586us; 596us; 606us; 616us; 626us; 636us; 646us; 658us; 672us; 685us; 700us; 715us; 730us; 745us; 760us; 775us; 790us; 805us; 820us; 835us; 850us; 865us; 880us; 895us; 910us; 925us; 926us; 927us; 942us; 957us; 958us; 962us; 964us; 965us; 969us; 972us; 973us; 983us; 985us; 986us; 1001us; 1003us; 1018us; 1019us; 1020us; 1035us; 1036us; 1037us; 1039us; 1048us; 1049us; 1058us; 1060us; 1061us; 1062us; 1063us; 1064us; 1066us; 1067us; 1068us; 1069us; 1070us; 1071us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 5us; 7us; 5us; 5us; 0us; 1us; 4us; 5us; 1us; 1us; 1us; 3us; 3us; 4us; 2us; 2us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 7us; 4us; 0us; 1us; 1us; 3us; 0us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 25us; 25us; 26us; 27us; 27us; 27us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 16414us; 16415us; 16416us; 16417us; 16419us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 65535us; 16423us; 65535us; 16424us; 65535us; 65535us; 16425us; 65535us; 65535us; 65535us; 65535us; 16427us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16432us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16446us; 16447us; 65535us; 65535us; 16448us; 65535us; 65535us; 16450us; 65535us; 65535us; 16451us; 65535us; 65535us; 16453us; 65535us; 65535us; 65535us; 16454us; 16457us; 65535us; 16459us; 16461us; 65535us; 65535us; 16463us; 65535us; 65535us; 16464us; 16465us; 16466us; 16467us; 65535us; 16468us; 16469us; 16470us; 16471us; 16472us; 16473us; |]
let _fsyacc_reductions ()  =    [| 
# 463 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 472 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "CPar.fsy"
                                                               Prog _1 
                   )
# 45 "CPar.fsy"
                 : Absyn.program));
# 483 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "CPar.fsy"
                                                               [] 
                   )
# 49 "CPar.fsy"
                 : 'Topdecs));
# 493 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 50 "CPar.fsy"
                 : 'Topdecs));
# 505 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 54 "CPar.fsy"
                 : 'Topdec));
# 516 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CPar.fsy"
                                                               _1 
                   )
# 55 "CPar.fsy"
                 : 'Topdec));
# 527 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 59 "CPar.fsy"
                 : 'Vardec));
# 539 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 63 "CPar.fsy"
                 : 'Vardesc));
# 550 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 64 "CPar.fsy"
                 : 'Vardesc));
# 561 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CPar.fsy"
                                                               _2                                      
                   )
# 65 "CPar.fsy"
                 : 'Vardesc));
# 572 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 66 "CPar.fsy"
                 : 'Vardesc));
# 583 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 67 "CPar.fsy"
                 : 'Vardesc));
# 595 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 71 "CPar.fsy"
                 : 'Fundec));
# 608 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 72 "CPar.fsy"
                 : 'Fundec));
# 622 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "CPar.fsy"
                                                               [] 
                   )
# 76 "CPar.fsy"
                 : 'Paramdecs));
# 632 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CPar.fsy"
                                                               _1 
                   )
# 77 "CPar.fsy"
                 : 'Paramdecs));
# 643 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "CPar.fsy"
                                                               [_1]     
                   )
# 81 "CPar.fsy"
                 : 'Paramdecs1));
# 654 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 82 "CPar.fsy"
                 : 'Paramdecs1));
# 666 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "CPar.fsy"
                                                               Block _2 
                   )
# 86 "CPar.fsy"
                 : 'Block));
# 677 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CPar.fsy"
                                                               [] 
                   )
# 90 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 687 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 91 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 699 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 92 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 711 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "CPar.fsy"
                                                               _1 
                   )
# 96 "CPar.fsy"
                 : 'Stmt));
# 722 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "CPar.fsy"
                                                               _1 
                   )
# 97 "CPar.fsy"
                 : 'Stmt));
# 733 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 101 "CPar.fsy"
                 : 'StmtM));
# 744 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               Return None          
                   )
# 102 "CPar.fsy"
                 : 'StmtM));
# 754 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 103 "CPar.fsy"
                 : 'StmtM));
# 765 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CPar.fsy"
                                                               _1                   
                   )
# 104 "CPar.fsy"
                 : 'StmtM));
# 776 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 105 "CPar.fsy"
                 : 'StmtM));
# 789 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 106 "CPar.fsy"
                 : 'StmtM));
# 801 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CPar.fsy"
                                                               Switch(_3, _5)       
                   )
# 107 "CPar.fsy"
                 : 'StmtM));
# 813 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 111 "CPar.fsy"
                 : 'StmtU));
# 826 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 112 "CPar.fsy"
                 : 'StmtU));
# 838 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 113 "CPar.fsy"
                 : 'StmtU));
# 850 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "CPar.fsy"
                                                               []       
                   )
# 117 "CPar.fsy"
                 : 'Stmts));
# 860 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmts1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "CPar.fsy"
                                                               _1       
                   )
# 118 "CPar.fsy"
                 : 'Stmts));
# 871 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "CPar.fsy"
                                                              [(_2, _4)]     
                   )
# 122 "CPar.fsy"
                 : 'Stmts1));
# 883 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "CPar.fsy"
                                                              (_2, _4) :: _5 
                   )
# 123 "CPar.fsy"
                 : 'Stmts1));
# 896 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CPar.fsy"
                                                               Access _1           
                   )
# 127 "CPar.fsy"
                 : 'Expr));
# 907 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "CPar.fsy"
                                                               _1                  
                   )
# 128 "CPar.fsy"
                 : 'Expr));
# 918 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "CPar.fsy"
                                                               _1                  
                   )
# 133 "CPar.fsy"
                 : 'ExprNotAccess));
# 929 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CPar.fsy"
                                                               Assign2(_1, _3)     
                   )
# 134 "CPar.fsy"
                 : 'ExprNotAccess));
# 941 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 135 "CPar.fsy"
                 : 'ExprNotAccess));
# 953 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 136 "CPar.fsy"
                 : 'ExprNotAccess));
# 965 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 137 "CPar.fsy"
                 : 'ExprNotAccess));
# 976 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CPar.fsy"
                                                               Assign(_2, Prim2("+", Access(_2), CstI 1)) 
                   )
# 138 "CPar.fsy"
                 : 'ExprNotAccess));
# 987 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "CPar.fsy"
                                                               Prim1("printch", _2) 
                   )
# 139 "CPar.fsy"
                 : 'ExprNotAccess));
# 998 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 140 "CPar.fsy"
                 : 'ExprNotAccess));
# 1009 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 141 "CPar.fsy"
                 : 'ExprNotAccess));
# 1019 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 142 "CPar.fsy"
                 : 'ExprNotAccess));
# 1031 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 143 "CPar.fsy"
                 : 'ExprNotAccess));
# 1043 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 144 "CPar.fsy"
                 : 'ExprNotAccess));
# 1055 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 145 "CPar.fsy"
                 : 'ExprNotAccess));
# 1067 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 146 "CPar.fsy"
                 : 'ExprNotAccess));
# 1079 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 147 "CPar.fsy"
                 : 'ExprNotAccess));
# 1091 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 148 "CPar.fsy"
                 : 'ExprNotAccess));
# 1103 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 149 "CPar.fsy"
                 : 'ExprNotAccess));
# 1115 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 150 "CPar.fsy"
                 : 'ExprNotAccess));
# 1127 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 151 "CPar.fsy"
                 : 'ExprNotAccess));
# 1139 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 152 "CPar.fsy"
                 : 'ExprNotAccess));
# 1151 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 153 "CPar.fsy"
                 : 'ExprNotAccess));
# 1163 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 154 "CPar.fsy"
                 : 'ExprNotAccess));
# 1175 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "CPar.fsy"
                                                               CstI _1             
                   )
# 158 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1186 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "CPar.fsy"
                                                               CstC _1             
                   )
# 159 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1197 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "CPar.fsy"
                                                               _2                  
                   )
# 160 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1208 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               Addr _2             
                   )
# 161 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1219 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "CPar.fsy"
                                                               AccVar _1           
                   )
# 165 "CPar.fsy"
                 : 'Access));
# 1230 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CPar.fsy"
                                                               _2                  
                   )
# 166 "CPar.fsy"
                 : 'Access));
# 1241 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 167 "CPar.fsy"
                 : 'Access));
# 1252 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 168 "CPar.fsy"
                 : 'Access));
# 1263 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "CPar.fsy"
                                                                          AccIndex2(_1, _3, _6) 
                   )
# 169 "CPar.fsy"
                 : 'Access));
# 1276 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 170 "CPar.fsy"
                 : 'Access));
# 1288 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "CPar.fsy"
                                                               []       
                   )
# 174 "CPar.fsy"
                 : 'Exprs));
# 1298 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "CPar.fsy"
                                                               _1       
                   )
# 175 "CPar.fsy"
                 : 'Exprs));
# 1309 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "CPar.fsy"
                                                               [_1]     
                   )
# 179 "CPar.fsy"
                 : 'Exprs1));
# 1320 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 180 "CPar.fsy"
                 : 'Exprs1));
# 1332 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "CPar.fsy"
                                                               [] 
                   )
# 184 "CPar.fsy"
                 : 'LExprs));
# 1342 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "CPar.fsy"
                                                               _1 
                   )
# 185 "CPar.fsy"
                 : 'LExprs));
# 1353 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "CPar.fsy"
                                                               [_1]  
                   )
# 189 "CPar.fsy"
                 : 'LExprs1));
# 1364 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 190 "CPar.fsy"
                 : 'LExprs1));
# 1376 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "CPar.fsy"
                                                               LNode _2
                   )
# 194 "CPar.fsy"
                 : 'LExpr));
# 1387 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "CPar.fsy"
                                                               CNode _1
                   )
# 195 "CPar.fsy"
                 : 'LExpr));
# 1398 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "CPar.fsy"
                                                               _1       
                   )
# 199 "CPar.fsy"
                 : 'Const));
# 1409 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "CPar.fsy"
                                                               _1       
                   )
# 200 "CPar.fsy"
                 : 'Const));
# 1420 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "CPar.fsy"
                                                               - _2     
                   )
# 201 "CPar.fsy"
                 : 'Const));
# 1431 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "CPar.fsy"
                                                               -1       
                   )
# 202 "CPar.fsy"
                 : 'Const));
# 1441 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "CPar.fsy"
                                                               _1       
                   )
# 206 "CPar.fsy"
                 : 'Const2));
# 1452 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "CPar.fsy"
                                                               TypI     
                   )
# 210 "CPar.fsy"
                 : 'Type));
# 1462 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "CPar.fsy"
                                                               TypC     
                   )
# 211 "CPar.fsy"
                 : 'Type));
# 1472 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "CPar.fsy"
                                                               TypL     
                   )
# 212 "CPar.fsy"
                 : 'Type));
|]
# 1483 "CPar.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 49;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
